import os
import platform
import nucleotide


Import('settings')

name_full = 'test'

settings.set_custom( 'RTL', 'dynamic' )
settings.set_custom( 'architecture', 'i386' )

configuration = settings.get_custom( 'configuration' )

directory_pdb = './out/bin/' + configuration + '/'
directory_obj = './out/bin/' + configuration + '/'


if 'Windows' == platform.system() :
    if True == settings.exists_custom( 'compiler_version_msvc' ) :
        directory_pdb += settings.get_custom( 'compiler_version_msvc' ) + '/'
        directory_obj += settings.get_custom( 'compiler_version_msvc' ) + '/'

directory_exe = './out/'

# Accumulate Atoms
settings.accumulate( 'include', { '0' : '../../src' } )
settings.accumulate( 'architecture', { 'name' : settings.get_custom( 'architecture' ) } )
settings.accumulate( 'exception' )
settings.accumulate( 'source:c++', { 'dialect' : 'c++11' } )
settings.accumulate( 'RTTI', { 'enable': 'false' } )
settings.accumulate( 'compiler:configuration', { 'name'          : configuration  } )
settings.accumulate( 'compiler:optimisation',  { 'configuration' : configuration  } )
settings.accumulate( 'compiler:version',  { 'msvc' : [ settings.get_custom( 'compiler_version_msvc' ) ] } )

settings.accumulate( 'compiler:warning', { 'return-address-of-local-variable': 'enable'  } )
settings.accumulate( 'compiler:warning', { 'unused-variable': 'disable'  } )

settings.accumulate( 'PDB', { 'configuration': configuration , 'synchronous' : 'false', 'file-name': os.path.join( directory_pdb, name_full + '.pdb' ) } )
settings.accumulate( 'RTL', { 'configuration' : configuration, 'type': settings.get_custom( 'RTL' ) } )

if 'true' == settings.get_custom( 'pp2f' ):
    settings.accumulate( 'macro',  { 'name' : 'COLOR_USE_PP2FILE' } )

# Accumulate source
envObject = nucleotide.Environment( settings ).native()
##if 'Linux' == platform.system() :
#envObject.Append( CPPFLAGS = [ '-Wall' ] )
#envObject.Append( CPPFLAGS = [ '-Wunused-local-typedefs' ] )
#envObject.Append( CPPFLAGS = [ '-Wmaybe-uninitialized' ] )

#if 'Windows' == platform.system() :
#    envObject.Append( CPPFLAGS = [ '/wd4464' ] )
#    envObject.Append( CPPFLAGS   = [ '/we4800', '/we4244', '/we4365', '/we4365' ] )


source = []
source +=   [
     envObject.StaticObject( target =  os.path.join( directory_obj, 'main'             ) + envObject[ 'OBJSUFFIX' ],  source = './main.cpp'       )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'conversion'       ) + envObject[ 'OBJSUFFIX' ],  source = './conversion.cpp' )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'targa'            ) + envObject[ 'OBJSUFFIX' ],  source = './targa.cpp'      )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'bound'            ) + envObject[ 'OBJSUFFIX' ],  source = './bound.cpp'      )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'sizeof'           ) + envObject[ 'OBJSUFFIX' ],  source = './sizeof.cpp'     )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'set_invoke'       ) + envObject[ 'OBJSUFFIX' ],  source = './set_invoke.cpp' )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'get_invoke'       ) + envObject[ 'OBJSUFFIX' ],  source = './get_invoke.cpp' )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'get_test'         ) + envObject[ 'OBJSUFFIX' ],  source = './get_test.cpp'   )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'gray_test'        ) + envObject[ 'OBJSUFFIX' ],  source = './gray_test.cpp'  )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'gray_scale'       ) + envObject[ 'OBJSUFFIX' ],  source = './gray_scale.cpp' )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'decompose'        ) + envObject[ 'OBJSUFFIX' ],  source = './decompose.cpp'  )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'place'            ) + envObject[ 'OBJSUFFIX' ],  source = './place.cpp'      )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'convsemi'         ) + envObject[ 'OBJSUFFIX' ],  source = './convsemi.cpp'   )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'image'            ) + envObject[ 'OBJSUFFIX' ],  source = './image.cpp'      )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'constant'         ) + envObject[ 'OBJSUFFIX' ],  source = './constant.cpp'   )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'palette'          ) + envObject[ 'OBJSUFFIX' ],  source = './palette.cpp'   )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'extract'          ) + envObject[ 'OBJSUFFIX' ],  source = './extract.cpp'  )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'operation/gamma'      ) + envObject[ 'OBJSUFFIX' ],  source = './operation/gamma.cpp'      )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'operation/bias'       ) + envObject[ 'OBJSUFFIX' ],  source = './operation/bias.cpp'       )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'operation/gain'       ) + envObject[ 'OBJSUFFIX' ],  source = './operation/gain.cpp'       )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'operation/distance'   ) + envObject[ 'OBJSUFFIX' ],  source = './operation/distance.cpp'  )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'operation/operation'  ) + envObject[ 'OBJSUFFIX' ],  source = './operation/operation.cpp'  )
   ]

source_ec = []
source_ec +=   [
     envObject.StaticObject( target =  os.path.join( directory_obj, 'ec'      ) + envObject[ 'OBJSUFFIX' ],  source = './ec.cpp'         )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'image'   ) + envObject[ 'OBJSUFFIX' ],  source = './image.cpp'      )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'targa'   ) + envObject[ 'OBJSUFFIX' ],  source = './targa.cpp'      )
    ]

source_tc = []
source_tc +=   [
     envObject.StaticObject( target =  os.path.join( directory_obj, 'tc'      ) + envObject[ 'OBJSUFFIX' ],  source = './tc.cpp'         )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'image'   ) + envObject[ 'OBJSUFFIX' ],  source = './image.cpp'      )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'targa'   ) + envObject[ 'OBJSUFFIX' ],  source = './targa.cpp'      )
    ]

source_allrgb = []
source_allrgb +=   [
     envObject.StaticObject( target =  os.path.join( directory_obj, 'allrgb'  ) + envObject[ 'OBJSUFFIX' ],  source = './allrgb.cpp'     )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'image'   ) + envObject[ 'OBJSUFFIX' ],  source = './image.cpp'      )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'targa'   ) + envObject[ 'OBJSUFFIX' ],  source = './targa.cpp'      )
    ]

source_allgray = []
source_allgray +=   [
     envObject.StaticObject( target =  os.path.join( directory_obj, 'allgray' ) + envObject[ 'OBJSUFFIX' ],  source = './allgray.cpp'   )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'image'   ) + envObject[ 'OBJSUFFIX' ],  source = './image.cpp'      )
   , envObject.StaticObject( target =  os.path.join( directory_obj, 'targa'   ) + envObject[ 'OBJSUFFIX' ],  source = './targa.cpp'      )
    ]

# Make native environment
envProgram = nucleotide.Environment( settings ).native()


# Create program
program = envProgram.Program( target =  directory_exe+ 'test' + envProgram['PROGSUFFIX'], source = source )

# Create program
program_ec = envProgram.Program( target =  directory_exe+ 'ec' + envProgram['PROGSUFFIX'], source = source_ec )

# Create program
program_tc = envProgram.Program( target =  directory_exe+ 'tc' + envProgram['PROGSUFFIX'], source = source_tc )

# Create program
program_allrgb = envProgram.Program( target =  directory_exe+ 'allrgb' + envProgram['PROGSUFFIX'], source = source_allrgb )

# Create program
program_allgray = envProgram.Program( target =  directory_exe+ 'allgray' + envProgram['PROGSUFFIX'], source = source_allgray )

# ... and return!
Return(  'program_ec', 'program_tc', 'program', 'program_allrgb', 'program_allgray' )
