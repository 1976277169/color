
/*
X_WS: 109850/100000;
Y_WS: 1;
Z_WS: 35585/100000;

X_WD: 99072/100000;
Y_WD: 1;
Z_WD: 85223/100000;
*/

M_A:matrix( [1,0,0],[0,1,0], [0,0,1] );

M_XYZ :matrix( [1,0,0],[0,1,0], [0,0,1] );
M_Bradford :matrix( [ 8951000/10000000,  2664000/10000000, -1614000/10000000 ], [ -7502000/10000000, 17135000/10000000, 367000/10000000 ], [ 389000/10000000,   -0685000/10000000,  10296000/10000000 ] );
M_VonKries :matrix( [ 4002400/10000000,  7076000/10000000, -0808100/10000000 ], [ -2263000/10000000, 11653200/10000000, 457000/10000000 ], [      0/10000000,          0/10000000,   9182200/10000000 ] );

M_A:M_Bradford;

ev( %, numer );

rho_S:    ( M_A . matrix( [X_WS], [Y_WS], [Z_WS] ) ) . matrix( [1], [0], [0] );
gamma_S:  ( M_A . matrix( [X_WS], [Y_WS], [Z_WS] ) ) . matrix( [0], [1], [0] );
beta_S:   ( M_A . matrix( [X_WS], [Y_WS], [Z_WS] ) ) . matrix( [0], [0], [1] );

rho_D:    ( M_A . matrix( [X_WD], [Y_WD], [Z_WD] ) ) . matrix( [1], [0], [0] );
gamma_D:  ( M_A . matrix( [X_WD], [Y_WD], [Z_WD] ) ) . matrix( [0], [1], [0] );
beta_D:   ( M_A . matrix( [X_WD], [Y_WD], [Z_WD] ) ) . matrix( [0], [0], [1] );

M: invert( M_A  ) . matrix( [rho_D/rho_S,0,0], [0,gamma_D/gamma_S,0], [0,0,beta_D/beta_S]  ) . M_A;
ev( %, numer );